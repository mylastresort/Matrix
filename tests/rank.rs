use matrix::{Complex, Matrix, C, M};

#[test]
fn test_rank() {
    let u = M!([[1., 0., 0.], [0., 1., 0.], [0., 0., 1.]]);
    assert_eq!(u.rank(), 3);

    let u = M!([[1., 2., 0., 0.], [2., 4., 0., 0.], [-1., 2., 1., 1.]]);
    assert_eq!(u.rank(), 2);

    let u = M!([[8., 5., -2.], [4., 7., 20.], [7., 6., 1.], [21., 18., 7.]]);
    assert_eq!(u.rank(), 3);
}

#[test]
fn test_rank_complex() {
    let u = M!([
        [C!(1., 12.), C!(2., 13.), C!(3., 14.)],
        [C!(4., 15.), C!(5., 16.), C!(6., 17.)],
        [C!(7., 18.), C!(8., 19.), C!(9., 20.)],
    ]);
    let a = u.rank();
    assert_eq!(a, 2);

    let u = M!([
        [C!(1., 12.), C!(2., 13.), C!(3., 14.), C!(4., 15.)],
        [C!(5., 16.), C!(6., 17.), C!(7., 18.), C!(8., 19.)],
        [C!(9., 20.), C!(10., 21.), C!(11., 22.), C!(12., 23.)],
    ]);
    let a = u.rank();
    assert_eq!(a, 2);

    let u = M!([
        [
            C!(41., 12.),
            C!(22., 13.),
            C!(13., 14.),
            C!(4., 15.),
            C!(5., 16.)
        ],
        [
            C!(6., 17.),
            C!(7., 18.),
            C!(8., 19.),
            C!(9., 20.),
            C!(10., 21.)
        ],
        [
            C!(11., 22.),
            C!(12., 23.),
            C!(14., 24.),
            C!(15., 25.),
            C!(16., 26.)
        ],
        [
            C!(17., 27.),
            C!(18., 28.),
            C!(19., 29.),
            C!(20., 30.),
            C!(21., 31.)
        ],
        [
            C!(22., 32.),
            C!(23., 33.),
            C!(24., 34.),
            C!(25., 35.),
            C!(26., 36.)
        ],
    ]);
    let a = u.rank();
    assert_eq!(a, 4);

    let u = M!([
        [C!(1., 12.), C!(2., 13.), C!(3., 14.), C!(4., 15.)],
        [C!(5., 16.), C!(6., 17.), C!(7., 18.), C!(8., 19.)],
        [C!(9., 20.), C!(10., 21.), C!(11., 22.), C!(12., 23.)],
        [C!(13., 24.), C!(14., 25.), C!(15., 26.), C!(16., 27.)],
        [C!(17., 28.), C!(18., 29.), C!(19., 30.), C!(20., 31.)],
    ]);

    let a = u.rank();
    assert_eq!(a, 2);
}
